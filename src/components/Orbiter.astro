---
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";

type Props = {
  host: { alt: string; image: ImageMetadata };
  orbits: { alt: string; image: ImageMetadata }[][];
};

const { host, orbits } = Astro.props;
---

<div class="orbiter">
  <Image alt={host.alt} src={host.image} />
  <div class="orbits">
    {
      orbits.map((orbit) => (
        <div class="orbit">
          {orbit.map((item) => (
            <Image alt={item.alt} src={item.image} />
          ))}
        </div>
      ))
    }
  </div>
</div>

<style>
  @property --sibling-index {
    syntax: "<number>";
    inherits: false;
    initial-value: 1;
  }

  @property --sibling-count {
    syntax: "<number>";
    inherits: false;
    initial-value: 1;
  }

  @property --orbit {
    syntax: "<number>";
    inherits: true;
    initial-value: 1;
  }

  @keyframes revolve {
    from {
      offset-distance: 0%;
    }
    to {
      offset-distance: 100%;
    }
  }

  @keyframes hide {
    0% {
      z-index: -1;
    }

    24.9% {
      z-index: -1;
    }
    25% {
      z-index: 0;
    }
    50% {
      z-index: 0;
    }
    100% {
      z-index: -1;
    }
  }

  .orbiter {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    position: relative;
    height: 100%;
    width: 100%;
    overflow: hidden;
  }

  .orbits {
    display: flex;
    justify-content: center;
    align-items: center;
    position: absolute;
  }

  .orbit {
    display: inline-grid;
    position: absolute;

    &:nth-child(even) > * {
      animation-direction: reverse;
    }
  }

  .orbit > * {
    --speed: 30s;
    offset-path: ellipse(calc(120px * var(--orbit)) calc(300px * var(--orbit)) at 0% 50%);
    offset-distance: 0%;
    offset-rotate: auto 90deg;
    animation:
      revolve var(--speed) linear infinite,
      hide var(--speed) linear infinite;
    animation-delay: calc(var(--speed) * -1 * (var(--sibling-index) - 1) / var(--sibling-count));
  }
</style>

<script>
  function register() {
    const orbits = document.querySelectorAll<HTMLElement>(".orbit");
    orbits.forEach((orbit, index) => {
      const children = orbit.children as HTMLCollectionOf<HTMLElement>;
      const count = children.length;
      orbit.style.setProperty("--orbit", String(index + 1));

      Array.from(children).forEach((orbitElement, childIndex) => {
        orbitElement.style.setProperty("--sibling-index", String(childIndex + 1));
        orbitElement.style.setProperty("--sibling-count", String(count));
      });
    });
  }

  register();
  document.addEventListener("astro:after-swap", register);
</script>
