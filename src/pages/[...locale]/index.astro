---
import { useI18n } from "astro-nanostores-i18n:runtime";
import Spotlight from "../../layouts/sections/Spotlight.astro";
import Shell from "../../layouts/Shell.astro";
import { defaultPropsAndParamsOptions, generateGetStaticIndexPaths } from "../../utils/paths";
import Orbiter from "../../components/Orbiter.astro";
import ScrollButton from "../../components/ScrollButton.astro";
import LogoSquare from "../../../assets/square.svg";
import MoodleLogo from "../../../assets/logos/moodle.svg";
import GitLogo from "../../../assets/logos/git.svg";
import TypescriptLogo from "../../../assets/logos/typescript.svg";
import Css3Logo from "../../../assets/logos/css3.svg";
import Html5Logo from "../../../assets/logos/html5.svg";
import PostgresqlLogo from "../../../assets/logos/postgresql.svg";
import ReactLogo from "../../../assets/logos/react.svg";
import JavascriptLogo from "../../../assets/logos/javascript.svg";
import AstroLogo from "../../../assets/logos/astro.svg";
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import { i18nProps } from "astro-loader-i18n";
import slug from "limax";
import Grid from "../../layouts/sections/Grid.astro";
import Contact from "../../layouts/groups/Contact.astro";

export const getStaticPaths = generateGetStaticIndexPaths("[...locale]");

const messages = useI18n("src/pages/[...locale]/index.astro", {
  spotlightTitle: "Empowers and Connects",
  spotlightContent: "Join us in our mission to empower and connect the EdTech space with our products.",
  spotlightActionConnect: "Connect",
  spotlightActionEmpower: "Empower",
  spotlightActionEmpowerLink: "/products",
  empowerTitle: "Products that empower",
  connectTitle: "Connect with us",
  connectOldTitle: "Like in the old times",
  connectOldContent: "Don't hesitate to email or call us!",
  connectModernTitle: "How we do it today",
  connectModernContent: "Have a look at our social media:",
});

const {
  translations,
  data: { locale },
} = Astro.props;

const collection = (await getCollection("products")).filter((entry) => entry.data.locale === locale);
const products = i18nProps(collection, {
  ...defaultPropsAndParamsOptions,
  routePattern: `${Astro.routePattern}/[products]/[product]`,
  generateSegments: (entry) => ({ product: slug(entry.data.title) }),
});
---

<Shell translations={translations} bodyClasses="scroll-snapping-block">
  <Spotlight id="spotlight">
    <h1 slot="title">{messages.spotlightTitle}</h1>
    <p slot="content">{messages.spotlightContent}</p>
    <Fragment slot="actions">
      <a href={messages.spotlightActionEmpowerLink} class="button primary">{messages.spotlightActionEmpower}</a>
      <a href="#connect" class="button">{messages.spotlightActionConnect}</a>
    </Fragment>
    <Orbiter slot="stage">
      <Image slot="host" alt="Our logo as the orbiters host" src={LogoSquare} />
      <Fragment slot="orbits">
        <div class="orbit">
          <div>🎓</div>
          <div>📚</div>
          <div>💻</div>
          <div>☁️</div>
          <div>🧠</div>
          <div>💬</div>
          <div>🚀</div>
          <div>💡</div>
          <div>🧑‍🏫</div>
        </div>
        <div class="orbit">
          <Image alt="Logo of Moodle" src={MoodleLogo} />
          <Image alt="Logo of Git" src={GitLogo} />
          <Image alt="Logo of Typescript" src={TypescriptLogo} />
          <Image alt="Logo of CSS" src={Css3Logo} />
          <Image alt="Logo of HTML" src={Html5Logo} />
          <Image alt="Logo of PostgreSQL" src={PostgresqlLogo} />
          <Image alt="Logo of React" src={ReactLogo} />
          <Image alt="Logo of Javascript" src={JavascriptLogo} />
          <Image alt="Logo of Astro" src={AstroLogo} />
        </div>
      </Fragment>
    </Orbiter>
  </Spotlight>
  <Grid id="empower">
    <h2 slot="title">{messages.empowerTitle}</h2>
    <Fragment slot="content">
      {
        products.map((product) => (
          <article>
            <h3>{product.data.title}</h3>
            <p>{product.data.summary}</p>
            <a href={product.translatedPath} class="button primary">
              {messages.spotlightActionEmpower}
            </a>
          </article>
        ))
      }
    </Fragment>
  </Grid>
  <Grid id="connect">
    <h2 slot="title">{messages.connectTitle}</h2>
    <Fragment slot="content">
      <article>
        <h3>{messages.connectOldTitle}</h3>
        <p>{messages.connectOldContent}</p>
        <Contact />
      </article>
      <article>
        <h3>{messages.connectModernTitle}</h3>
        <p>{messages.connectModernContent}</p>
        <nav>
          <ul>
            <li><a href="https://linkedin.com/company/code-4-humans">LinkedIn</a></li>
            <li><a href="https://github.com/cforh">Github</a></li>
          </ul>
        </nav>
      </article>
    </Fragment>
  </Grid>
  <ScrollButton />
</Shell>

<style>
  h1,
  h2,
  h3 {
    margin: 0;
  }

  :global(main) {
    display: flex;
    flex-direction: column;
    gap: 0;
    height: 100vh;
    overflow-y: scroll;
    scroll-snap-type: y mandatory;
  }

  #spotlight,
  #empower,
  #connect {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    scroll-snap-align: center;
    background-size: 100% 100%;
    background-position:
      0px 0px,
      0px 0px;
  }

  #spotlight {
    background-image:
      radial-gradient(60% 100% at 75% 25%, rgb(from var(--color-primary) r g b / 0.3) 0%, transparent 100%),
      radial-gradient(60% 100% at 25% 75%, rgb(from var(--color-secondary) r g b / 0.3) 0%, transparent 100%);
  }

  #empower {
    background-image:
      radial-gradient(60% 100% at 25% 75%, rgb(from var(--color-primary) r g b / 0.3) 0%, transparent 100%),
      radial-gradient(60% 100% at 75% 25%, rgb(from var(--color-secondary) r g b / 0.3) 0%, transparent 100%);
  }

  #connect {
    background-image:
      radial-gradient(60% 100% at 75% 75%, rgb(from var(--color-primary) r g b / 0.3) 0%, transparent 100%),
      radial-gradient(60% 100% at 25% 25%, rgb(from var(--color-secondary) r g b / 0.3) 0%, transparent 100%);
  }

  #empower article {
    display: grid;
    grid-template-rows: auto 1fr auto;

    .button {
      width: fit-content;
    }
  }
</style>
